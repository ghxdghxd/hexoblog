<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/papers/2018-02-03-git.html</url>
      <content type="html"><![CDATA[<h1 id="Git用法"><a href="#Git用法" class="headerlink" title="Git用法"></a>Git用法</h1><h2 id="1-建立仓库"><a href="#1-建立仓库" class="headerlink" title="1 建立仓库"></a>1 建立仓库</h2><ul>
<li>远程<br><code>git remote add origin git@github.com:ghxdghxd/$NAME.git</code></li>
<li>本地<br><code>git init</code></li>
</ul>
<h2 id="2-常用操作"><a href="#2-常用操作" class="headerlink" title="2 常用操作"></a>2 常用操作</h2><ul>
<li>拉取  <code>git pull origin master</code></li>
<li>提交<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *.py</span><br><span class="line">git commit -m "message"</span><br><span class="line">git push origin master/dev/develop</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-分支类型"><a href="#2-分支类型" class="headerlink" title="2 分支类型"></a>2 分支类型</h2><table>
<thead>
<tr>
<th style="text-align:center">主支</th>
<th style="text-align:center">修补</th>
<th style="text-align:center">发布</th>
<th style="text-align:center">开发</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center">hotfix</td>
<td style="text-align:center">release</td>
<td style="text-align:center">develop</td>
<td style="text-align:center">feature</td>
</tr>
</tbody>
</table>
<h3 id="查看本地-全部-远程分支"><a href="#查看本地-全部-远程分支" class="headerlink" title="查看本地/全部/远程分支"></a>查看本地/全部/远程分支</h3><pre><code>git branch  /-a/r
</code></pre><h3 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h3><pre><code>git branch [name]
</code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre><code>git branch -d [name]
</code></pre><h3 id="建立并切换开发分支"><a href="#建立并切换开发分支" class="headerlink" title="建立并切换开发分支"></a>建立并切换开发分支</h3><pre><code>git checkout -b [name] origin/develop
</code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre><code>git checkout [name]
</code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre><code>git merge --no-ff [name]
</code></pre><h3 id="本地分支提交到远程"><a href="#本地分支提交到远程" class="headerlink" title="本地分支提交到远程"></a>本地分支提交到远程</h3><pre><code>git push origin dev:develop
</code></pre><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><pre><code>git mv
</code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre><code>git rm
</code></pre><h4 id="push命令用于将本地分支的更新，推送到远程主机。"><a href="#push命令用于将本地分支的更新，推送到远程主机。" class="headerlink" title="push命令用于将本地分支的更新，推送到远程主机。"></a>push命令用于将本地分支的更新，推送到远程主机。</h4><p>它的格式与git pull命令相仿。</p>
<pre><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
</code></pre><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，<br>所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</p>
<pre><code>git push origin master
</code></pre><p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>
<p><strong>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</strong></p>
<pre><code>git push origin :master
</code></pre><p>等同于</p>
<pre><code>git push origin --delete master
</code></pre><p>上面命令表示删除origin主机的master分支。</p>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<pre><code>git push origin
</code></pre><p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<pre><code>git push
</code></pre><p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<pre><code>git push -u origin master
</code></pre><p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>
<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>
<pre><code>git config --global push.default matching
</code></pre><p>或者</p>
<pre><code>git config --global push.default simple
</code></pre><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>
<pre><code>git push --all origin
</code></pre><p>上面命令表示，将所有本地分支都推送到origin主机。</p>
<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p>
<pre><code>git push --force origin
</code></pre><p>上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>
<p>最后，git push不会推送标签(tag)，除非使用–tags选项。</p>
<pre><code>git push origin --tags
</code></pre><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><pre><code>git config --global core.quotepath false
</code></pre><p>core.quotepath设为false的话，就不会对0x80以上的字符进行quote。中文显示正常。</p>
<h2 id="gitignore忽略文件"><a href="#gitignore忽略文件" class="headerlink" title="gitignore忽略文件"></a>gitignore忽略文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、配置语法：</span><br><span class="line"></span><br><span class="line">　　以斜杠“/”开头表示目录；</span><br><span class="line"></span><br><span class="line">　　以星号“*”通配多个字符；</span><br><span class="line"></span><br><span class="line">　　以问号“?”通配单个字符</span><br><span class="line"></span><br><span class="line">　　以方括号“[]”包含单个字符的匹配列表；</span><br><span class="line"></span><br><span class="line">　　以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</span><br><span class="line"></span><br><span class="line">　　</span><br><span class="line"></span><br><span class="line">　　此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</span><br><span class="line"></span><br><span class="line">2、示例：</span><br><span class="line"></span><br><span class="line">　　（1）规则：fd1/*</span><br><span class="line">　　　　  说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</span><br><span class="line"></span><br><span class="line">　　（2）规则：/fd1/*</span><br><span class="line">　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；</span><br><span class="line"></span><br><span class="line">　　（3）规则：</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">!.gitignore</span><br><span class="line">!/fw/bin/</span><br><span class="line">!/fw/sf/</span><br><span class="line"></span><br><span class="line">说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；</span><br></pre></td></tr></table></figure>
<h2 id="git-子模块"><a href="#git-子模块" class="headerlink" title="git 子模块"></a>git 子模块</h2><blockquote>
<p>仓库包括别的仓库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;仓库地址&gt; &lt;本地路径&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo安装配置]]></title>
      <url>/papers/2018-02-03-hexo.html</url>
      <content type="html"><![CDATA[<ul>
<li><p>1</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">建立空仓库</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:ghxdghxd/ghxdghxd.github.io.git</span><br><span class="line"><span class="built_in">cd</span> ghxdghxd.github.io</span><br><span class="line">建立分支并切换</span><br><span class="line">git checkout hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>2</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始化hexo</span><br><span class="line">mkdir Blog</span><br><span class="line">npm install hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">cp -a Blog/* ghxdghxd.github.io</span><br><span class="line">rm -r Blog</span><br><span class="line">mv ghxdghxd.github.io Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>3</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改_config.yml, 用git可以免密码，如用https:则不免密码</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:ghxdghxd/ghxdghxd.github.io.git</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git submodule]]></title>
      <url>/papers/2018-02-03-submodule.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用场景: 用于项目 中的 项目</p>
</blockquote>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository&gt; --recursive 递归的方式克隆整个项目</span><br><span class="line">git submodule add &lt;repository&gt;&lt;path&gt; 添加子模块</span><br><span class="line">git submodule init 初始化子模块</span><br><span class="line">git submodule update 更新子模块</span><br><span class="line">git submodule foreach git pull 拉取所有子模块</span><br></pre></td></tr></table></figure>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h3 id="1-创建带子模块的版本库"><a href="#1-创建带子模块的版本库" class="headerlink" title="1. 创建带子模块的版本库"></a>1. 创建带子模块的版本库</h3><p>例如我们要创建如下结构的项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project  </span><br><span class="line">    |--moduleA  </span><br><span class="line">    |--readme.txt</span><br></pre></td></tr></table></figure></p>
<p>创建project版本库，并提交readme.txt文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init --bare project.git</span><br><span class="line">git <span class="built_in">clone</span> project.git project1cd project1</span><br><span class="line"><span class="built_in">echo</span><span class="string">"This is a project."</span> &gt; readme.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add readme.txt"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<p>创建moduleA版本库，并提交a.txt文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init --bare moduleA.git</span><br><span class="line">git <span class="built_in">clone</span> moduleA.git moduleA1</span><br><span class="line"><span class="built_in">cd</span> moduleA1</span><br><span class="line"><span class="built_in">echo</span><span class="string">"This is a submodule."</span> &gt; a.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add a.txt"</span></span><br><span class="line">git push origin mastercd ..</span><br></pre></td></tr></table></figure></p>
<p>在project项目中引入子模块moduleA，并提交子模块信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project1</span><br><span class="line">git submodule add ../moduleA.git moduleA</span><br><span class="line">git statusgit diff</span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">"add submodule"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<p>使用git status可以看到多了两个需要提交的文件，其中.gitmodules指定submodule的主要信息，包括子模块的路径和地址信息，moduleA指定了子模块的commit id，使用git diff可以看到这两项的内容。这里需要指出父项目的git并不会记录submodule的文件变动，它是按照commit id指定submodule的git header，所以.gitmodules和moduleA这两项是需要提交到父项目的远程仓库的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up-to-datewith<span class="string">'origin/master'</span>.</span><br><span class="line">Changes to be committed:  (use <span class="string">"git reset HEAD ..."</span>to unstage)</span><br><span class="line">    new file:   .gitmodules</span><br><span class="line">    new file:   moduleA</span><br></pre></td></tr></table></figure></p>
<h3 id="2-克隆带子模块的版本库"><a href="#2-克隆带子模块的版本库" class="headerlink" title="2. 克隆带子模块的版本库"></a>2. 克隆带子模块的版本库</h3><p>方法一，先clone父项目，再初始化submodule，最后更新submodule，初始化只需要做一次，之后每次只需要直接update就可以了，需要注意submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> project.git project2</span><br><span class="line"><span class="built_in">cd</span> project2</span><br><span class="line">git submodule init</span><br><span class="line">git submodule updatecd ..</span><br></pre></td></tr></table></figure></p>
<p>方法二，采用递归参数–recursive，需要注意同样submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> project.git project3 --recursive</span><br></pre></td></tr></table></figure></p>
<h3 id="3-修改子模块"><a href="#3-修改子模块" class="headerlink" title="3. 修改子模块"></a>3. 修改子模块</h3><p>修改子模块之后只对子模块的版本库产生影响，对父项目的版本库不会产生任何影响，如果父项目需要用到最新的子模块代码，我们需要更新父项目中submodule commit id，默认的我们使用git status就可以看到父项目中submodule commit id已经改变了，我们只需要再次提交就可以了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project1/moduleA</span><br><span class="line">git branch</span><br><span class="line"><span class="built_in">echo</span><span class="string">"This is a submodule."</span> &gt; b.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add b.txt"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git status</span><br><span class="line">git diff</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"update submodule add b.txt"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<h3 id="4-更新子模块"><a href="#4-更新子模块" class="headerlink" title="4. 更新子模块"></a>4. 更新子模块</h3><p>更新子模块的时候要注意子模块的分支默认不是master。<br>方法一，先pull父项目，然后执行<figure class="highlight plain"><figcaption><span>submodule update```，注意moduleA的分支始终不是master。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```bash</span><br><span class="line">cd project2</span><br><span class="line">git pull</span><br><span class="line">git submodule updatecd ..</span><br></pre></td></tr></table></figure></p>
<p>方法二，先进入子模块，然后切换到需要的分支，这里是master分支，然后对子模块pull，这种方法会改变子模块的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project3/moduleA</span><br><span class="line">git checkout master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git submodule foreach git pull</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<h3 id="5-删除子模块"><a href="#5-删除子模块" class="headerlink" title="5. 删除子模块"></a>5. 删除子模块</h3><p>网上有好多用的是下面这种方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached moduleA</span><br><span class="line">rm -rf moduleA</span><br><span class="line">rm .gitmodules</span><br><span class="line">vim .git/config</span><br></pre></td></tr></table></figure></p>
<p>删除submodule相关的内容，例如下面的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">"moduleA"</span>]      url = /Users/nick/dev/nick-doc/testGitSubmodule/moduleA.git</span><br></pre></td></tr></table></figure></p>
<p>然后提交到远程服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">"remove submodule"</span></span><br></pre></td></tr></table></figure></p>
<p>但是我自己本地实验的时候，发现用下面的方式也可以，服务器记录的是.gitmodules和moduleA，本地只要用git的删除命令删除moduleA，再用git status查看状态就会发现.gitmodules和moduleA这两项都已经改变了，至于.git/config，仍会记录submodule信息，但是本地使用也没发现有什么影响，如果重新从服务器克隆则.git/config中不会有submodule信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm moduleA</span><br><span class="line">git status</span><br><span class="line">git commit -m<span class="string">"remove submodule"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
