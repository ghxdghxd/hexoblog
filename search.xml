<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[hexo安装配置]]></title>
      <url>/papers/2018-02-03-hexo.html</url>
      <content type="html"><![CDATA[<ul>
<li><p>1</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">建立空仓库</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:ghxdghxd/ghxdghxd.github.io.git</span><br><span class="line"><span class="built_in">cd</span> ghxdghxd.github.io</span><br><span class="line">建立分支并切换</span><br><span class="line">git checkout hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>2</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始化hexo</span><br><span class="line">mkdir Blog</span><br><span class="line">npm install hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">cp -a Blog/* ghxdghxd.github.io</span><br><span class="line">rm -r Blog</span><br><span class="line">mv ghxdghxd.github.io Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>3</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改_config.yml, 用git可以免密码，如用https:则不免密码</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:ghxdghxd/ghxdghxd.github.io.git</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git submodule]]></title>
      <url>/papers/2018-02-03-submodule.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用场景: 用于项目 中的 项目</p>
</blockquote>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository&gt; --recursive 递归的方式克隆整个项目</span><br><span class="line">git submodule add &lt;repository&gt;&lt;path&gt; 添加子模块</span><br><span class="line">git submodule init 初始化子模块</span><br><span class="line">git submodule update 更新子模块</span><br><span class="line">git submodule foreach git pull 拉取所有子模块</span><br></pre></td></tr></table></figure>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h3 id="1-创建带子模块的版本库"><a href="#1-创建带子模块的版本库" class="headerlink" title="1. 创建带子模块的版本库"></a>1. 创建带子模块的版本库</h3><p>例如我们要创建如下结构的项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project  </span><br><span class="line">    |--moduleA  </span><br><span class="line">    |--readme.txt</span><br></pre></td></tr></table></figure></p>
<p>创建project版本库，并提交readme.txt文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init --bare project.git</span><br><span class="line">git <span class="built_in">clone</span> project.git project1cd project1</span><br><span class="line"><span class="built_in">echo</span><span class="string">"This is a project."</span> &gt; readme.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add readme.txt"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<p>创建moduleA版本库，并提交a.txt文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init --bare moduleA.git</span><br><span class="line">git <span class="built_in">clone</span> moduleA.git moduleA1</span><br><span class="line"><span class="built_in">cd</span> moduleA1</span><br><span class="line"><span class="built_in">echo</span><span class="string">"This is a submodule."</span> &gt; a.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add a.txt"</span></span><br><span class="line">git push origin mastercd ..</span><br></pre></td></tr></table></figure></p>
<p>在project项目中引入子模块moduleA，并提交子模块信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project1</span><br><span class="line">git submodule add ../moduleA.git moduleA</span><br><span class="line">git statusgit diff</span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">"add submodule"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<p>使用git status可以看到多了两个需要提交的文件，其中.gitmodules指定submodule的主要信息，包括子模块的路径和地址信息，moduleA指定了子模块的commit id，使用git diff可以看到这两项的内容。这里需要指出父项目的git并不会记录submodule的文件变动，它是按照commit id指定submodule的git header，所以.gitmodules和moduleA这两项是需要提交到父项目的远程仓库的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up-to-datewith<span class="string">'origin/master'</span>.</span><br><span class="line">Changes to be committed:  (use <span class="string">"git reset HEAD ..."</span>to unstage)</span><br><span class="line">    new file:   .gitmodules</span><br><span class="line">    new file:   moduleA</span><br></pre></td></tr></table></figure></p>
<h3 id="2-克隆带子模块的版本库"><a href="#2-克隆带子模块的版本库" class="headerlink" title="2. 克隆带子模块的版本库"></a>2. 克隆带子模块的版本库</h3><p>方法一，先clone父项目，再初始化submodule，最后更新submodule，初始化只需要做一次，之后每次只需要直接update就可以了，需要注意submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> project.git project2</span><br><span class="line"><span class="built_in">cd</span> project2</span><br><span class="line">git submodule init</span><br><span class="line">git submodule updatecd ..</span><br></pre></td></tr></table></figure></p>
<p>方法二，采用递归参数–recursive，需要注意同样submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> project.git project3 --recursive</span><br></pre></td></tr></table></figure></p>
<h3 id="3-修改子模块"><a href="#3-修改子模块" class="headerlink" title="3. 修改子模块"></a>3. 修改子模块</h3><p>修改子模块之后只对子模块的版本库产生影响，对父项目的版本库不会产生任何影响，如果父项目需要用到最新的子模块代码，我们需要更新父项目中submodule commit id，默认的我们使用git status就可以看到父项目中submodule commit id已经改变了，我们只需要再次提交就可以了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project1/moduleA</span><br><span class="line">git branch</span><br><span class="line"><span class="built_in">echo</span><span class="string">"This is a submodule."</span> &gt; b.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add b.txt"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git status</span><br><span class="line">git diff</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"update submodule add b.txt"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<h3 id="4-更新子模块"><a href="#4-更新子模块" class="headerlink" title="4. 更新子模块"></a>4. 更新子模块</h3><p>更新子模块的时候要注意子模块的分支默认不是master。<br>方法一，先pull父项目，然后执行<figure class="highlight plain"><figcaption><span>submodule update```，注意moduleA的分支始终不是master。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```bash</span><br><span class="line">cd project2</span><br><span class="line">git pull</span><br><span class="line">git submodule updatecd ..</span><br></pre></td></tr></table></figure></p>
<p>方法二，先进入子模块，然后切换到需要的分支，这里是master分支，然后对子模块pull，这种方法会改变子模块的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project3/moduleA</span><br><span class="line">git checkout master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git submodule foreach git pull</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<h3 id="5-删除子模块"><a href="#5-删除子模块" class="headerlink" title="5. 删除子模块"></a>5. 删除子模块</h3><p>网上有好多用的是下面这种方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached moduleA</span><br><span class="line">rm -rf moduleA</span><br><span class="line">rm .gitmodules</span><br><span class="line">vim .git/config</span><br></pre></td></tr></table></figure></p>
<p>删除submodule相关的内容，例如下面的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">"moduleA"</span>]      url = /Users/nick/dev/nick-doc/testGitSubmodule/moduleA.git</span><br></pre></td></tr></table></figure></p>
<p>然后提交到远程服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">"remove submodule"</span></span><br></pre></td></tr></table></figure></p>
<p>但是我自己本地实验的时候，发现用下面的方式也可以，服务器记录的是.gitmodules和moduleA，本地只要用git的删除命令删除moduleA，再用git status查看状态就会发现.gitmodules和moduleA这两项都已经改变了，至于.git/config，仍会记录submodule信息，但是本地使用也没发现有什么影响，如果重新从服务器克隆则.git/config中不会有submodule信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm moduleA</span><br><span class="line">git status</span><br><span class="line">git commit -m<span class="string">"remove submodule"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
